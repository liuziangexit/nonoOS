OK-用820初始化buddy
OK-实现buddy
OK-人肉测试buddy（我甚至写了自动化测试用例！）
OK-实现slab
OK-实现malloc
OK-高于物理内存的部分不做虚拟地址映射，这样有非法访问的时候可以直接page fault
OK-所有abort能改成panic就改panic，带有出错原因
OK-实现内核线程
OK-用户程序编译系统
OK-重新看下整个启动流程和内存布局的情况
OK-slab重新检查，加上注释。为什么不支持4M分配？
OK-实现记录物理-虚拟内存对应关系的一种数据结构
OK-vma
ok-4k小页映射
OK-加载用户程序到内存
OK-跑第一行用户态代码，然后返回
OK-用户进程/线程
OK-用户进程地址空间
OK-syscall返回值
OK-中断可以嵌套吗(可以)
OK-是不是没有清中断掩码？(应该是CPU做了)
OK-实现memory fence
OK-实现atomic int
OK-实现spinlock
OK-给现有的某些代码加锁（包括如果关了中断，这个中断会丢失吗？(不会)如果处理中断的时候又有中断，会怎么样？(会像递归调用函数那样)）
OK-实现timer
OK-完整实现task接口，线程创建、线程调度（包括K和U之间）、线程退出
OK-实现用户的malloc的按页内存分配
OK-exit
OK-想个办法访问地址0时候报错
OK-vma相邻合并
OK-重写有问题的virtual_memory_find_fit
OK-加上avl_node_init
OK-find_fit支持设置flags
OK-测一下第二次find_fit找出来的地方是不是正接着第一个findfit
OK-测试umalloc_pgfault
OK-实现ufree
OK-析构vm的时候回收用户malloc相关内存
OK-实现用户的malloc的页内内存分配
OK-实现task传参数
OK-画一下内核内存布局
OK-getpid
OK-实现系统调用 printf
OK-用户只需要调用那个中断就可以提权到ring0，修复这问题
OK-task返回值
OK-考虑一下switch_to里面没有储存eax有没有问题？-没有问题，反正本身eax就是用来返回值的，这也就意味着不储存它不会有什么影响
OK-实现一个打印vm内存布局的函数，打印内核布局和用户布局出来看
OK-实现内核之外的物理内存的页分配
OK-用户malloc使用FREE SPACE的内存
OK-实现简单调度算法
OK-sleep
OK-yield
OK-修复现在看到的args生命周期问题 其实不是生命周期问题，是因为free region access那里修改页表没刷缓存导致的奇怪现象
OK-实现共享内存的系统调用
OK-完成task_test程序，测试用户态程序创建多个线程和多个进程，以及共享内存，最后启动几个countdown和几个schd_test
OK-所有内核对象（目前有shm、mut、cv）都在统一的地方生成id并记录id对应的对象类型，线程使用一个对象的时候要ref它，可以手动unref或退出时自动unref。当一个对象的引用计数降到0时要析构
OK-检查task对象的不安全使用情况，不在临界区内访问
OK-实现join

-mutex
-cv
-lock
-unlock
-wait
-notify
-实现锁了之后有的SMART REGION要换成锁（特别是对于一些并发访问的数据结构来说），这样粒度小很多
-检查对包括avl树的许多共享数据的操作是否有互斥
-每个进程的cpu占用率计算
-实现task的系统调用（join用一个条件变量来实现）
-检查vm和vma是否存在不安全访问
-支持进程内线程，至少栈位置不能写死了

-内存不够的时候打印slab和buddy的情况
-有没有其他地方需要更新tlb却没更新？找一下
-flush tlb的地方能不能只更新某个特定条目
-看看能不能实现打印调用站

-考虑操作当前vm时候需不需要关中断，主要是有没有可能在中断里也操作vm，如果要，就要去加上(因为一个进程有很多个线程啊，不管中断里操不操作，都要加吧？)
这样说来的话，所有带有vm参数的函数都要重新考虑这个问题了，因为那个vm有可能是current vm！最简单的方式可以是禁止参数是currentvm

-处理用户程序BAD ACCESS、执行错误的代码、seg fault等情况

-实现系统调用scanf
-实现用户态abort，只是abort用户进程
-实现nosh(nonoShell)
-重新考虑输入输出，主要是如何判断输入属于哪个进程
-terminal增加右边的位置条，表示当前屏幕位置，类似于scroll bar

-想办法看看taskswitch耗时多少，考虑怎么根据耗时动态计算时间片
-在物理机上运行

-看看libno里有没有需要单独实现用户态版本的函数
-运行 ASCII RayTracing
-整理编译系统，支持配置tool prefix

-如果不实现POSIX的信号概念，如何实现程序动态处理各种外部事件如停止或挂起
-实现POSIX接口
-给slab写一个buddy那样的测试用例
-安全问题1)内核线程栈溢出的处理 2)用户进程有没有可能访问到内核栈或代码
-考虑怎么检测内存泄漏
-文件系统
-实现页面swap

GUI
网络

多核心支持
